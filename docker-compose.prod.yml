name: freecad-prod

services:
  postgres:
    image: postgres:16
    env_file:
      - .env.prod
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - pgdata:/var/lib/postgresql/data
    restart: always

  minio:
    image: quay.io/minio/minio:RELEASE.2025-01-05T00-00-00Z
    command: server /data --console-address ":9001"
    env_file:
      - .env.prod
    ports:
      - "9001:9001"
    volumes:
      - minio:/data
    restart: always

  redis:
    image: redis:7-alpine
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - redisdata:/data
    restart: always

  api:
    image: ${IMAGE_NAME}:${IMAGE_TAG:-latest}
    env_file:
      - .env.prod
    environment:
      ENV: production
      DEV_AUTH_BYPASS: "false"
      SECURITY_HSTS_ENABLED: "true"
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - redis
      - minio
    healthcheck:
      test: ["CMD-SHELL", "curl -sf http://localhost:8000/api/v1/healthz || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
    deploy:
      resources:
        limits:
          cpus: "2.0"
          memory: 2g
    restart: always

  worker-freecad:
    image: ${IMAGE_NAME}:${IMAGE_TAG:-latest}
    command: ["celery", "-A", "app.tasks.worker", "worker", "-Q", "freecad", "-c", "${FREECAD_QUEUE_CONCURRENCY:-1}"]
    env_file:
      - .env.prod
    depends_on:
      - api
    deploy:
      resources:
        limits:
          cpus: "2.0"
          memory: 3g
    restart: always

  worker-sim:
    image: ${IMAGE_NAME}:${IMAGE_TAG:-latest}
    command: ["celery", "-A", "app.tasks.worker", "worker", "-Q", "sim", "-c", "${SIM_QUEUE_CONCURRENCY:-1}"]
    env_file:
      - .env.prod
    depends_on:
      - api
    deploy:
      resources:
        limits:
          cpus: "2.0"
          memory: 3g
    restart: always

  worker:
    image: ${IMAGE_NAME}:${IMAGE_TAG:-latest}
    command: ["celery", "-A", "app.tasks.worker", "worker", "-Q", "cpu,postproc", "-c", "4"]
    env_file:
      - .env.prod
    depends_on:
      - api
    restart: always

  migrate:
    image: ${IMAGE_NAME}:${IMAGE_TAG:-latest}
    env_file:
      - .env.prod
    depends_on:
      - postgres
      - api
    command: ["alembic", "upgrade", "head"]
    restart: "no"

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./compose/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - "9090:9090"
    restart: always

  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
    volumes:
      - ./compose/grafana_dashboard.json:/var/lib/grafana/dashboards/cnc.json:ro
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    restart: always

volumes:
  pgdata: {}
  minio: {}
  redisdata: {}


