# Ana proje konfigürasyonu
# FreeCAD tabanlı CNC/CAM/CAD üretim platformu

[project]
name = "freecad-cnc-platform"
version = "0.1.0"
description = "FreeCAD tabanlı CNC/CAM/CAD üretim platformu - Monorepo"
readme = "README.md"
requires-python = ">=3.11"

# Pre-commit ve geliştirme araçları konfigürasyonu
[tool.black]
line-length = 100
target-version = ["py311"]
extend-exclude = '''
/(
    # API dışındaki alanları hariç tut
    apps/web
    | node_modules
    | .git
    | .venv
    | venv
    | build
    | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
src_paths = ["apps/api"]
skip_glob = [
    "apps/web/*",
    "node_modules/*",
    ".venv/*",
    "venv/*"
]
known_first_party = ["app"]
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.ruff]
line-length = 100
target-version = "py311"

# Sadece API klasörünü kontrol et
include = ["apps/api/**/*.py"]
exclude = [
    "apps/web",
    "node_modules",
    ".git",
    ".venv",
    "venv",
    "__pycache__",
    "*.pyc",
    ".pytest_cache",
    "build",
    "dist",
    "*.egg-info"
]

# Aktif kurallar
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "C90", # mccabe
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "S",   # flake8-bandit
    "C4",  # flake8-comprehensions
    "PIE", # flake8-pie
    "T20", # flake8-print
]

# Göz ardı edilecek kurallar
ignore = [
    "S101",  # assert kullanımına izin ver (testlerde gerekli)
    "S311",  # pseudo-random generators (geliştirme amaçlı)
    "B008",  # function calls in argument defaults
    "T201",  # print statements (geliştirme aşamasında izin ver)
    "S603",  # subprocess call check (FreeCAD entegrasyonu için gerekli)
    "S607",  # subprocess call with shell (kontrollü kullanım)
]

# Dosya başına max karmaşıklık
[tool.ruff.mccabe]
max-complexity = 10

# Import sıralama ayarları
[tool.ruff.isort]
known-first-party = ["app"]

[tool.mypy]
python_version = "3.11"
files = "apps/api"
exclude = [
    "apps/web",
    "node_modules",
    ".venv",
    "venv",
    "tests"
]

# Tip kontrolü ayarları
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # Aşamalı geçiş için false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

# Import ayarları
ignore_missing_imports = true
follow_imports = "silent"

# Platform ayarları
platform = "win32"

# Bandit güvenlik taraması konfigürasyonu
[tool.bandit]
exclude_dirs = [
    "tests",
    "apps/web", 
    "node_modules",
    ".venv",
    "venv"
]
tests = ["B201", "B301", "B401", "B501", "B601", "B602", "B605", "B607"]
skips = [
    "B101",  # assert_used (testlerde gerekli)
    "B601",  # paramiko_calls (SSH bağlantıları için)
    "B603",  # subprocess_without_shell_equals_true (FreeCAD için gerekli)
]

# Coverage konfigürasyonu (pytest-cov için)
[tool.coverage.run]
source = ["apps/api/app"]
omit = [
    "apps/api/tests/*",
    "apps/api/app/test_*",
    "apps/web/*",
    "*/node_modules/*",
    "*/.venv/*",
    "*/venv/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Pytest konfigürasyonu
[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=app",
    "--cov-report=term-missing",
    "--cov-report=xml",
]
testpaths = ["apps/api/tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "freecad: marks tests that require FreeCAD",
]

# Build sistem konfigürasyonu
[build-system]
requires = ["setuptools>=65", "wheel"]
build-backend = "setuptools.build_meta"