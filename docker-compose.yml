name: freecad-platform

services:
  postgres:
    image: postgres:15-alpine
    container_name: fc_postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-net

  redis:
    image: redis:7-alpine
    container_name: fc_redis
    command: ["redis-server", "--appendonly", "yes"]
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-net

  minio:
    image: quay.io/minio/minio:RELEASE.2024-06-13T22-53-53Z
    container_name: fc_minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    ports:
      - "${MINIO_PORT:-9000}:9000"
      - "${MINIO_CONSOLE_PORT:-9001}:9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-net

  minio-setup:
    image: minio/mc:latest
    container_name: fc_minio_setup
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: |
      /bin/sh -c "
      mc alias set local http://minio:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD} &&
      mc mb --ignore-existing local/${S3_BUCKET_NAME} &&
      mc anonymous set download local/${S3_BUCKET_NAME} || true &&
      echo 'MinIO bucket hazÄ±r: ${S3_BUCKET_NAME}'
      "
    networks:
      - app-net

  api:
    build:
      context: ./apps/api
      dockerfile: Dockerfile
    container_name: fc_api
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    env_file:
      - .env
    environment:
      ENV: production
      DATABASE_URL: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      REDIS_URL: redis://redis:6379/0
      AWS_S3_ENDPOINT: http://minio:9000
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      MODEL_POLICY: ${MODEL_POLICY}
      DEFAULT_MODEL: ${DEFAULT_MODEL}
      FALLBACK_MODEL: ${FALLBACK_MODEL}
      MODEL_PLAN: ${MODEL_PLAN}
      ALLOWED_MODELS: ${ALLOWED_MODELS}
    ports:
      - "${API_PORT:-8000}:8000"
    command: ["/bin/sh", "-c", "./start.sh"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/healthz"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - app-net
    volumes:
      - ./apps/api:/app

  worker:
    build:
      context: ./apps/api
      dockerfile: Dockerfile
    container_name: fc_worker
    depends_on:
      api:
        condition: service_started
      redis:
        condition: service_healthy
    env_file:
      - .env
    environment:
      DATABASE_URL: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      REDIS_URL: redis://redis:6379/0
      AWS_S3_ENDPOINT: http://minio:9000
    command: ["celery", "-A", "app.tasks.worker", "worker", "--loglevel=INFO", "-Q", "cpu,postproc", "-c", "4"]
    networks:
      - app-net

  worker-freecad:
    build:
      context: ./apps/api
      dockerfile: Dockerfile.freecad
    container_name: fc_worker_freecad
    depends_on:
      api:
        condition: service_started
      redis:
        condition: service_healthy
    env_file:
      - .env
    environment:
      DATABASE_URL: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      REDIS_URL: redis://redis:6379/0
      AWS_S3_ENDPOINT: http://minio:9000
      FREECAD_TIMEOUT_SECONDS: ${FREECAD_TIMEOUT_SECONDS:-1200}
      LANG: C.UTF-8
    command: ["celery", "-A", "app.tasks.worker", "worker", "--loglevel=INFO", "-Q", "freecad", "-c", "1"]
    healthcheck:
      test: ["CMD", "freecadcmd", "--version"]
      interval: 30s
      timeout: 10s
      retries: 5
    # securityContext-like: uncomment if daemon allows
    # read_only: true
    # security_opt:
    #   - no-new-privileges:true
    restart: always
    networks:
      - app-net

  worker-sim:
    build:
      context: ./apps/api
      dockerfile: Dockerfile.freecad
    container_name: fc_worker_sim
    depends_on:
      api:
        condition: service_started
      redis:
        condition: service_healthy
    env_file:
      - .env
    environment:
      DATABASE_URL: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      REDIS_URL: redis://redis:6379/0
      AWS_S3_ENDPOINT: http://minio:9000
      FREECAD_TIMEOUT_SECONDS: ${FREECAD_TIMEOUT_SECONDS:-1200}
      LANG: C.UTF-8
    command: ["celery", "-A", "app.tasks.worker", "worker", "--loglevel=INFO", "-Q", "sim", "-c", "1"]
    healthcheck:
      test: ["CMD", "freecadcmd", "--version"]
      interval: 30s
      timeout: 10s
      retries: 5
    # read_only: true
    # security_opt:
    #   - no-new-privileges:true
    restart: always
    networks:
      - app-net

  beat:
    build:
      context: ./apps/api
      dockerfile: Dockerfile
    container_name: fc_beat
    depends_on:
      redis:
        condition: service_healthy
    env_file:
      - .env
    environment:
      REDIS_URL: redis://redis:6379/0
    command: ["celery", "-A", "app.tasks.worker", "beat", "--loglevel=INFO"]
    volumes:
      - ./apps/api:/app
    networks:
      - app-net

  web:
    build:
      context: ./apps/web
      dockerfile: Dockerfile
    container_name: fc_web
    depends_on:
      api:
        condition: service_started
    env_file:
      - .env
    environment:
      NODE_ENV: development
      NEXT_PUBLIC_API_BASE_URL: http://localhost:8000
      NEXT_PUBLIC_DEV_AUTH_BYPASS: ${DEV_AUTH_BYPASS}
    ports:
      - "${WEB_PORT:-3000}:3000"
    networks:
      - app-net
    command: ["sh", "-lc", "corepack enable && corepack prepare pnpm@8.15.4 --activate && pnpm install && pnpm dev"]
    volumes:
      - ./apps/web:/app
      - web_node_modules:/app/node_modules

  otel-collector:
    image: otel/opentelemetry-collector:0.102.1
    container_name: fc_otel
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./compose/otel-collector-config.yaml:/etc/otel-collector-config.yaml:ro
    ports:
      - "${OTEL_COLLECTOR_PORT:-4317}:4317"
      - "${OTEL_COLLECTOR_HTTP_PORT:-4318}:4318"
    networks:
      - app-net

  prometheus:
    image: prom/prometheus:v2.52.0
    container_name: fc_prometheus
    volumes:
      - ./compose/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - "9090:9090"
    networks:
      - app-net
    depends_on:
      - api

  grafana:
    image: grafana/grafana:10.4.5
    container_name: fc_grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    ports:
      - "3001:3000"
    networks:
      - app-net
    depends_on:
      - prometheus

volumes:
  postgres_data:
  minio_data:
  web_node_modules:

networks:
  app-net:
    driver: bridge


