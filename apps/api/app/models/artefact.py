"""
Artefact model for generated files and outputs.
"""

from datetime import datetime, timezone
from typing import Optional

from sqlalchemy import (
    String, BigInteger, ForeignKey, Index,
    DateTime, Enum as SQLEnum
)
from sqlalchemy.dialects.postgresql import JSONB
from sqlalchemy.orm import Mapped, mapped_column, relationship

from .base import Base, TimestampMixin
from .enums import FileFormat


class Artefact(Base, TimestampMixin):
    """File artifacts generated by jobs."""
    
    __tablename__ = "artefacts"
    
    # Primary key
    id: Mapped[int] = mapped_column(primary_key=True, autoincrement=True)
    
    # Foreign keys
    job_id: Mapped[int] = mapped_column(
        ForeignKey("jobs.id", ondelete="CASCADE"),
        nullable=False,
        index=True
    )
    
    # Artifact type
    type: Mapped[str] = mapped_column(
        String(50),
        nullable=False
    )
    
    # File information
    name: Mapped[str] = mapped_column(
        String(255),
        nullable=False
    )
    s3_key: Mapped[str] = mapped_column(
        String(1024),
        unique=True,
        nullable=False,
        index=True
    )
    file_size: Mapped[int] = mapped_column(
        BigInteger,
        nullable=False
    )
    mime_type: Mapped[Optional[str]] = mapped_column(String(100))
    
    # Content verification
    sha256: Mapped[Optional[str]] = mapped_column(
        String(64),
        index=True
    )
    
    # Additional file metadata (renamed to avoid SQLAlchemy conflict)
    file_metadata: Mapped[Optional[dict]] = mapped_column(JSONB, name="metadata")
    
    # Expiration for temporary files
    expires_at: Mapped[Optional[datetime]] = mapped_column(
        DateTime(timezone=True),
        index=True
    )
    
    # Relationships
    job: Mapped["Job"] = relationship("Job", back_populates="artefacts")
    
    # Indexes
    __table_args__ = (
        Index('idx_artefacts_sha256', 'sha256',
              postgresql_where='sha256 IS NOT NULL'),
        Index('idx_artefacts_expires_at', 'expires_at',
              postgresql_where='expires_at IS NOT NULL'),
    )
    
    def __repr__(self) -> str:
        return f"<Artefact(id={self.id}, type={self.type}, name={self.name})>"
    
    @property
    def is_expired(self) -> bool:
        """Check if artifact has expired."""
        if not self.expires_at:
            return False
        return datetime.now(timezone.utc) > self.expires_at
    
    @property
    def file_extension(self) -> str:
        """Extract file extension from name."""
        if '.' not in self.name:
            return ''
        return self.name.rsplit('.', 1)[1].lower()
    
    @property
    def size_mb(self) -> float:
        """Get file size in megabytes."""
        return self.file_size / (1024 * 1024)
    
    @property
    def size_gb(self) -> float:
        """Get file size in gigabytes."""
        return self.file_size / (1024 * 1024 * 1024)
    
    def get_metadata(self, key: str, default=None):
        """Get specific metadata value."""
        if not self.metadata:
            return default
        return self.metadata.get(key, default)
    
    def set_metadata(self, key: str, value):
        """Set specific metadata value."""
        if not self.metadata:
            self.metadata = {}
        self.metadata[key] = value