name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  api:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./apps/api
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install .[dev]
      - name: Lint (ruff)
        run: ruff .
      - name: Format check (black)
        run: black --check .
      - name: Type check (mypy)
        run: mypy app || true
      - name: Pytest + Coverage
        run: |
          pytest --maxfail=1 -q --cov=app --cov-report=xml --cov-report=term
          python - << 'PY'
import sys
import xml.etree.ElementTree as ET
tree=ET.parse('coverage.xml');root=tree.getroot()
rate=float(root.attrib.get('line-rate','0'))
print('coverage line-rate=', rate)
sys.exit(0 if rate>=0.75 else 1)
PY
      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: api-coverage-xml
          path: apps/api/coverage.xml

  web:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./apps/web
    steps:
      - uses: actions/checkout@v4
      - name: Prepare API (.env for dev)
        run: |
          cat > .env <<'EOF'
          OPENAI_API_KEY=dummy
          S3_ENDPOINT=http://minio:9000
          S3_ACCESS_KEY_ID=minioadmin
          S3_SECRET_ACCESS_KEY=minioadmin
          S3_REGION=us-east-1
          S3_BUCKET=cad-artifacts
          CORS_ALLOWED_ORIGINS=http://localhost:3000
          DEV_AUTH_BYPASS=true
          EOF
      - name: Up backend
        run: docker compose up -d postgres redis minio api worker
      - name: Wait health
        run: |
          for i in {1..60}; do curl -sf http://localhost:8000/api/v1/healthz && exit 0; sleep 2; done
          exit 1
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - name: Install deps
        run: npm install
      - name: Env for web
        run: |
          echo "NEXT_PUBLIC_API_BASE_URL=http://localhost:8000" > .env.local
          echo "NEXT_PUBLIC_DEV_USER=ci@local" >> .env.local
      - name: Unit/Integration
        run: npm test
      - name: Playwright install
        run: npx playwright install --with-deps
      - name: E2E
        run: npm run test:e2e


