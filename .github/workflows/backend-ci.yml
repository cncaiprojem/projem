# FreeCAD CNC/CAM Platform - Backend CI Pipeline
# Bu workflow FastAPI backend'i için kapsamlı CI/CD süreci sağlar
# - Kod kalitesi kontrolü (Ruff, mypy, pytest)
# - Güvenlik taraması (Trivy, SBOM)
# - Container imaj oluşturma ve imzalama (Cosign)
# - Test coverage ve dependency vulnerability scanning

name: Backend CI

# Trigger koşulları - Backend değişikliklerinde çalış
on:
  push:
    branches: [ main, develop ]
    paths:
      - 'apps/api/**'
      - '.github/workflows/backend-ci.yml'
      - 'docker-compose.yml'
      - 'Makefile'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'apps/api/**'
      - '.github/workflows/backend-ci.yml'
      - 'docker-compose.yml'
      - 'Makefile'

# Güvenlik ve performans için global ayarlar
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/api
  PYTHON_VERSION: "3.11"
  
# Job'lar arası veri paylaşımı için concurrency group
concurrency:
  group: backend-ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # 1. Kod Kalitesi ve Statik Analiz
  quality-check:
    name: 🔍 Kod Kalitesi ve Statik Analiz
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: 📥 Kod deposunu çek
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Sonar analizi için tam geçmiş
          
      - name: 🐍 Python kurulumu
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: 'apps/api/requirements.txt'
          
      - name: 📦 Dependencies yükle
        working-directory: apps/api
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install ruff mypy types-redis types-requests
          
      - name: 🧹 Ruff linting (formatting + linting)
        working-directory: apps/api
        run: |
          echo "::group::Ruff Formatting Check"
          ruff format --check --diff .
          echo "::endgroup::"
          
          echo "::group::Ruff Linting"
          ruff check --output-format=github .
          echo "::endgroup::"
          
      - name: 🔍 MyPy type checking
        working-directory: apps/api
        run: |
          mypy app/ --ignore-missing-imports --show-error-codes
          
      - name: 📊 Kod karmaşıklığı analizi
        working-directory: apps/api
        run: |
          pip install radon
          radon cc app/ --min B --show-complexity
          radon mi app/ --min B

  # 2. Unit ve Integration Testleri
  test:
    name: 🧪 Testler ve Coverage
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    # Test için gerekli servisler
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_USER: testuser
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
          
      minio:
        image: minio/minio:latest
        env:
          MINIO_ROOT_USER: testuser
          MINIO_ROOT_PASSWORD: testpass123
        options: >-
          --health-cmd "curl -f http://localhost:9000/minio/health/live || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          --entrypoint="sh -c 'mkdir -p /data && minio server /data --console-address :9001'"
        ports:
          - 9000:9000
          - 9001:9001
          
    steps:
      - name: 📥 Kod deposunu çek
        uses: actions/checkout@v4
        
      - name: 🐍 Python kurulumu
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: 'apps/api/requirements.txt'
          
      - name: 📦 Dependencies ve test araçları yükle
        working-directory: apps/api
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio pytest-mock httpx
          
      - name: ⚙️ Test environment ayarla
        working-directory: apps/api
        env:
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb
          REDIS_URL: redis://localhost:6379/0
          S3_ENDPOINT_URL: http://localhost:9000
          S3_ACCESS_KEY: testuser
          S3_SECRET_KEY: testpass123
          AUTH_MODE: dev
        run: |
          # Database migration
          alembic upgrade head
          
          # MinIO bucket oluştur
          pip install minio
          python -c "
          import time
          from minio import Minio
          from minio.error import S3Error
          
          # Wait for MinIO to be ready
          for i in range(30):
              try:
                  client = Minio('localhost:9000', access_key='testuser', secret_key='testpass123', secure=False)
                  client.list_buckets()
                  break
              except Exception as e:
                  print(f'Waiting for MinIO... {i+1}/30')
                  time.sleep(2)
          else:
              raise Exception('MinIO not ready after 60 seconds')
          
          # Create bucket if it doesn't exist
          try:
              if not client.bucket_exists('freecad-files'):
                  client.make_bucket('freecad-files')
              print('MinIO bucket ready')
          except S3Error as e:
              print(f'Error creating bucket: {e}')
              raise
          "
          
      - name: 🧪 Unit testleri çalıştır
        working-directory: apps/api
        env:
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb
          REDIS_URL: redis://localhost:6379/0
          S3_ENDPOINT_URL: http://localhost:9000
          S3_ACCESS_KEY: testuser
          S3_SECRET_KEY: testpass123
          AUTH_MODE: dev
        run: |
          pytest tests/unit/ -v --cov=app --cov-report=xml --cov-report=term-missing --cov-fail-under=70
          
      - name: 🔗 Integration testleri çalıştır
        working-directory: apps/api
        env:
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb
          REDIS_URL: redis://localhost:6379/0
          S3_ENDPOINT_URL: http://localhost:9000
          S3_ACCESS_KEY: testuser
          S3_SECRET_KEY: testpass123
          AUTH_MODE: dev
        run: |
          pytest tests/integration/ -v --cov=app --cov-append --cov-report=xml
          
      - name: 📋 Contract testleri (OpenAPI)
        working-directory: apps/api
        env:
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb
          REDIS_URL: redis://localhost:6379/0
          AUTH_MODE: dev
        run: |
          pytest tests/contract/ -v
          
      - name: 📊 Coverage raporu yükle
        uses: codecov/codecov-action@v4
        with:
          file: apps/api/coverage.xml
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false  # Don't fail CI if codecov fails
          verbose: true
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  # 3. Dependency Security Scanning
  security-scan:
    name: 🔒 Güvenlik Taraması
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: 📥 Kod deposunu çek
        uses: actions/checkout@v4
        
      - name: 🐍 Python kurulumu
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: 🔍 Python dependency vulnerability scan
        working-directory: apps/api
        run: |
          pip install safety
          safety check --json --output safety-report.json || true
          safety check  # Güvenlik açığı varsa fail et
          
      - name: 📊 Dependency vulnerability report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: safety-report
          path: apps/api/safety-report.json
          retention-days: 30

  # 4. Docker Build ve Security Scan
  docker-build:
    name: 🐳 Docker Build ve Container Security
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: [quality-check, test]
    
    permissions:
      contents: read
      packages: write
      security-events: write
      
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
      
    steps:
      - name: 📥 Kod deposunu çek
        uses: actions/checkout@v4
        
      - name: 🔧 Docker Buildx kurulumu
        uses: docker/setup-buildx-action@v3
        
      - name: 🔑 GitHub Container Registry login
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: 🏷️ Container metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.title=FreeCAD CNC/CAM API
            org.opencontainers.image.description=FastAPI backend for FreeCAD-based CNC/CAM platform
            org.opencontainers.image.vendor=FreeCAD CNC/CAM Platform
            
      - name: 🏗️ Docker image build ve push
        id: build
        uses: docker/build-push-action@v6
        with:
          context: apps/api
          file: apps/api/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: true
          sbom: true
          
      - name: 🛡️ Container security scan (Trivy)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          
      - name: 📊 Security scan sonuçlarını yükle
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          
      - name: 📋 SBOM generation (Syft)
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
          syft ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} -o spdx-json > sbom.spdx.json
          
      - name: 📊 SBOM artifact yükle
        uses: actions/upload-artifact@v4
        with:
          name: backend-sbom
          path: sbom.spdx.json
          retention-days: 90

  # 5. Container Image Signing (Cosign)
  sign-image:
    name: ✍️ Container İmaj İmzalama
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: docker-build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      packages: write
      id-token: write
      
    steps:
      - name: 🔧 Cosign kurulumu
        uses: sigstore/cosign-installer@v3
        
      - name: 🔑 GitHub Container Registry login
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: ✍️ Container imaj imzala
        env:
          DIGEST: ${{ needs.docker-build.outputs.image-digest }}
        run: |
          echo "İmzalanacak imaj: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${DIGEST}"
          cosign sign --yes ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${DIGEST}
          
      - name: 🔍 İmzayı doğrula
        env:
          DIGEST: ${{ needs.docker-build.outputs.image-digest }}
        run: |
          cosign verify ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${DIGEST} \
            --certificate-identity-regexp="https://github.com/${{ github.repository }}/.github/workflows/backend-ci.yml@refs/heads/main" \
            --certificate-oidc-issuer="https://token.actions.githubusercontent.com"

  # 6. Performance Tests (isteğe bağlı)
  performance-test:
    name: 🚀 Performance Testleri
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: 📥 Kod deposunu çek
        uses: actions/checkout@v4
        
      - name: 🐍 Python kurulumu
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: 🏃 Load test çalıştır
        working-directory: apps/api
        run: |
          pip install locust
          echo "Load test placeholder - implement based on requirements"
          # locust -f scripts/load_test.py --headless -u 10 -r 2 -t 30s --host http://localhost:8000

  # 7. Notification ve Cleanup
  notify:
    name: 📢 Bildirimler
    runs-on: ubuntu-latest
    needs: [quality-check, test, security-scan, docker-build]
    if: always()
    
    steps:
      - name: 📊 Workflow durum özeti
        run: |
          echo "🔍 Kod Kalitesi: ${{ needs.quality-check.result }}"
          echo "🧪 Testler: ${{ needs.test.result }}"
          echo "🔒 Güvenlik: ${{ needs.security-scan.result }}"
          echo "🐳 Docker Build: ${{ needs.docker-build.result }}"
          
          if [[ "${{ contains(needs.*.result, 'failure') }}" == "true" ]]; then
            echo "❌ Workflow başarısız oldu!"
            exit 1
          else
            echo "✅ Workflow başarılı!"
          fi