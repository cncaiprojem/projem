name: Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build-test-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    env:
      IMAGE_NAME: ghcr.io/${{ github.repository }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Run API tests + coverage
        run: |
          cd apps/api
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install .[dev]
          pytest -q --maxfail=1 --cov=app --cov-config=.coveragerc --cov-report=xml
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set image tags
        id: meta
        run: |
          echo "TAG_SHA=${{ env.IMAGE_NAME }}:${{ github.sha }}" >> $GITHUB_OUTPUT
          echo "TAG_LATEST=${{ env.IMAGE_NAME }}:latest" >> $GITHUB_OUTPUT
      - name: Build & Push image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: apps/api/Dockerfile
          push: true
          tags: |
            ${{ steps.meta.outputs.TAG_SHA }}
            ${{ steps.meta.outputs.TAG_LATEST }}
      - name: Trivy scan
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ steps.meta.outputs.TAG_SHA }}
          format: table
          exit-code: '1'
          severity: HIGH,CRITICAL
      - name: Generate SBOM (Syft)
        uses: anchore/sbom-action@v0
        with:
          image: ${{ steps.meta.outputs.TAG_SHA }}
          format: cyclonedx-json
          output-file: sbom.cdx.json
      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.cdx.json

  deploy-staging:
    needs: build-test-scan
    runs-on: ubuntu-latest
    env:
      COMPOSE_FILE: docker-compose.prod.yml
    steps:
      - uses: actions/checkout@v4
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Create .env.prod from secrets
        run: |
          cat > .env.prod <<'EOF'
ENV=production
DEV_AUTH_BYPASS=false
API_PORT=8000
POSTGRES_USER=${{ secrets.POSTGRES_USER }}
POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
POSTGRES_DB=${{ secrets.POSTGRES_DB }}
DATABASE_URL=postgresql+psycopg2://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@postgres:5432/${{ secrets.POSTGRES_DB }}
REDIS_URL=redis://redis:6379/0
AWS_ACCESS_KEY_ID=${{ secrets.S3_ACCESS_KEY_ID }}
AWS_SECRET_ACCESS_KEY=${{ secrets.S3_SECRET_ACCESS_KEY }}
AWS_S3_ENDPOINT=${{ secrets.S3_ENDPOINT }}
AWS_S3_REGION=${{ secrets.S3_REGION }}
S3_BUCKET_NAME=${{ secrets.S3_BUCKET }}
SECURITY_HSTS_ENABLED=true
FREECAD_QUEUE_CONCURRENCY=1
SIM_QUEUE_CONCURRENCY=1
CORS_ALLOWED_ORIGINS=${{ secrets.CORS_ALLOWED_ORIGINS }}
EOF
      - name: Pin compose image to TAG_SHA
        run: |
          sed -i 's#ghcr.io/shaptina/proje:latest#${{ steps.meta.outputs.TAG_SHA }}#g' docker-compose.prod.yml
      - name: Pull & Up
        run: |
          docker compose -f docker-compose.prod.yml pull
          docker compose -f docker-compose.prod.yml up -d
      - name: Alembic upgrade
        run: |
          docker compose -f docker-compose.prod.yml run --rm migrate
      - name: Smoke test
        run: |
          for i in $(seq 1 60); do curl -fsS http://localhost:8000/api/v1/healthz && break; sleep 1; done
          curl -s -X GET http://localhost:8000/api/v1/healthz | cat

  deploy-prod:
    needs: deploy-staging
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v4
      - name: Approve and promote to prod (placeholder)
        run: echo "Manual approval gate recommended"

