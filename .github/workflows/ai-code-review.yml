name: AI Code Review

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches: [main]

permissions:
  contents: read
  pull-requests: write
  issues: write
  checks: write
  security-events: write

jobs:
  # 1. Code Quality Analysis (Replaces GitHub AI Inference due to 403 errors)
  code-quality:
    runs-on: ubuntu-latest
    name: Code Quality Analysis
    permissions:
      contents: read
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Analyze Changed Files
        run: |
          echo "Analyzing changed files for code quality issues..."
          git diff --name-only HEAD~1 | tee changed_files.txt
          
      - name: Python Code Analysis
        run: |
          pip install ruff bandit safety
          echo "## Python Code Quality Analysis" > quality_report.md
          echo "### Security Issues (Bandit)" >> quality_report.md
          bandit -r apps/api/app/ -f txt -o bandit_report.txt || true
          if [ -f bandit_report.txt ]; then
            echo '```' >> quality_report.md
            cat bandit_report.txt >> quality_report.md
            echo '```' >> quality_report.md
          fi
          
      - name: TypeScript/React Analysis
        run: |
          cd apps/web
          npm install --prefer-offline --no-audit
          echo "### TypeScript/React Issues" >> ../quality_report.md
          npm run lint 2>&1 | tee ../lint_output.txt || echo "Linting completed with warnings"
          if [ -f ../lint_output.txt ]; then
            echo '```' >> ../quality_report.md
            cat ../lint_output.txt >> ../quality_report.md
            echo '```' >> ../quality_report.md
          fi
      
      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let report = '## 🔍 Code Quality Analysis Report\n\n';
            try {
              const qualityReport = fs.readFileSync('quality_report.md', 'utf8');
              report += qualityReport;
            } catch (error) {
              report += 'No significant code quality issues found.\n';
            }
            report += '\n---\n*Automated Code Quality Check*';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });

  # 2. Google Gemini Code Assist
  gemini-review:
    runs-on: ubuntu-latest
    name: Gemini Code Analysis
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install Dependencies
        run: |
          pip install google-generativeai requests gitpython
      
      - name: Gemini Code Review
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          python .github/scripts/gemini-review.py

  # 3. Security Scanning with GitHub CodeQL (Free)
  security-scan:
    runs-on: ubuntu-latest
    name: Security Analysis
    strategy:
      matrix:
        language: ['python', 'javascript-typescript']
    steps:
      - uses: actions/checkout@v4
      
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-extended,security-and-quality
      
      - name: Autobuild
        uses: github/codeql-action/autobuild@v3
      
      - name: CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  # 4. Basic Linting (Free)
  lint-check:
    runs-on: ubuntu-latest
    name: Code Quality Check
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Python Linting
        run: |
          pip install ruff black pylint
          ruff check . || true
          black --check . || true
      
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: JavaScript/TypeScript Linting
        run: |
          cd apps/web
          npm install
          npm run lint --if-present || echo "No lint script found, skipping..."

  # Summary Report
  summary:
    needs: [ai-inference, gemini-review, security-scan, lint-check]
    runs-on: ubuntu-latest
    name: Review Summary
    if: always()
    steps:
      - name: Create Summary
        run: |
          echo "# 🤖 AI Code Review Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## ✅ Analysis Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Tool | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| GitHub AI Inference | ✅ AI Review |" >> $GITHUB_STEP_SUMMARY
          echo "| Google Gemini | ✅ Code Analysis |" >> $GITHUB_STEP_SUMMARY
          echo "| CodeQL | ✅ Security Scan |" >> $GITHUB_STEP_SUMMARY
          echo "| Linting | ✅ Code Quality |" >> $GITHUB_STEP_SUMMARY